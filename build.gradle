plugins {
  //id 'net.minecrell.licenser' version '0.3'
  id 'org.ajoberstar.grgit' version '2.3.0'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'de.oceanlabs.mcp'
version = '4.1-am'
targetCompatibility = sourceCompatibility = compileJava.targetCompatibility = compileJava.sourceCompatibility = '1.8'

ext {
    CHANGELOG = file("build/${project.name}-${project.version}-changelog.txt")
}

repositories {
    mavenCentral()
}

def gitVersion() {
    def desc = grgit.describe(longDescr: true).split('-') as List
    def hash = desc.remove(desc.size() - 1)
    def offset = desc.remove(desc.size() - 1)
    def tag = desc.join('-')
    def branch = grgit.branch.current().name 
    return "${tag}.${offset}${t -> if (branch != 'master') t << '-' + branch}"
}

jar {
    manifest.attributes('Main-Class': 'de.oceanlabs.mcp.mcinjector.MCInjector')
    manifest.attributes('Implementation-Version': project.version)
}
shadowJar {
    classifier 'fatjar'
    manifest.attributes('Main-Class': 'de.oceanlabs.mcp.mcinjector.MCInjector')
    manifest.attributes('Implementation-Version': project.version)
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives jar
    archives shadowJar
    archives sourceJar
}

def changelog = file('build/changelog.txt')
def changelog_named = CHANGELOG
if (changelog.exists()) {
    CHANGELOG.write(changelog.text)
    artifacts.archives CHANGELOG
}

task testInject(type: JavaExec) {
    main = 'de.oceanlabs.mcp.mcinjector.MCInjector'
    classpath = sourceSets.main.runtimeClasspath
    args('--in', 'test\\client.jar', '--out', 'test\\inject.jar', '--exc', 'test\\exceptions.txt', '--exclusions', 'test\\exclusions.txt')
}

dependencies {
    compile 'org.ow2.asm:asm:6.1-beta2'
    compile 'org.ow2.asm:asm-tree:6.1-beta2'
    compile 'net.sf.jopt-simple:jopt-simple:4.9'
    compile 'com.google.code.gson:gson:2.2.4'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact shadowJar
            artifact tasks.sourceJar
            if (CHANGELOG.exists())
                artifact source: CHANGELOG, classifier: 'changelog'
            pom {
                name = 'MCInjector'
                description = 'AncientMC implementation of MCInjector, built specifically for the Ancient Coder Pack (ACP) toolchain.'
                url = 'https://github.com/AncientMC/MCInjector'

                developers {
                    developer {
                        id = 'Fesh0r'
                        name = 'Fesh0r'
                    }
                    developer {
                        id = 'Searge'
                        name = 'Searge'
                    }
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'LexManos'
                        name = 'Lex Manos'
                    }
                }

                licenses { //TODO: Ask the guys if I can license LGPL2.1 like everything else.
                    license {
                        name = ''
                        url = ''
                        distribution = 'repo'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty('mavenPassword')) {
                credentials {
                    username = project.properties.mavenUser
                    password = project.properties.mavenPassword 
                }
                url 'http://files.minecraftforge.net/maven/manage/upload'
            } else {
                url 'D:\\Programs\\Projects\\AncientMC\\ancientmc-maven\\'
            }
        }
    }
}